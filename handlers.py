from random import shuffle, choice

from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from db_main import session
from db_models import new_user, get_word, add_word, del_word
from keyboards import *
from fsm_forms import *

dp = Dispatcher()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
async def process_start_command(message: Message):
    new_user(session, message)  #–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    button_1 = KeyboardButton(text='–ù–∞—á–∞—Ç—å')
    button_2 = KeyboardButton(text='/help')
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
    '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. ' 
    '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.',
    reply_markup=keyboard
)

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
async def process_help_command(message: Message):
    
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–ù–∞—á–∞—Ç—å'))

    await message.answer(
        '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, '
        '–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n'
        '- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n'
        '- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n'
        '–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞—á–∞—Ç—å"
async def process_start_words(message: Message, state: FSMContext):
    word = get_word(session, message)   # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã
    await state.set_state(CheckTranslate.tr_word)
    await state.update_data(tr_word=word)
    var_buttons = [
        word.tr, word.var_1, word.var_2, word.var_3
    ]
    builder = keyboard_builder(var_buttons)
    await state.set_state(CheckTranslate.var)
    await message.answer(
        f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n"{word.word}"',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
async def process_check_translate(message: Message, state: FSMContext):
    await state.update_data(var=message.text)
    data = await state.get_data()
    word = data.get('tr_word')
    if message.text.lower() == word.tr.lower():
        builder = main_buttons()
        answer = ['–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ!', '–¢–æ—á–Ω–æ!', '–û—Ç–ª–∏—á–Ω–æ!', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!']
        await state.clear()
        await message.answer(
            f'{choice(answer)} –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?', 
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        var_buttons = [
        word.tr, word.var_1, word.var_2, word.var_3
    ]
        builder = keyboard_builder(var_buttons)
        answer = ['–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ']
        await state.set_state(CheckTranslate.var)
        await message.answer(
            f'{choice(answer)}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n'
            f'–°–ª–æ–≤–æ "{word.word}"',
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
async def delete_word(message: Message, state: FSMContext):
    await state.clear()
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º üá∑üá∫ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å '
        '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(WordToDelete.word_to_del)


# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async def process_word_fillform(message: Message, state: FSMContext):
    await state.clear()
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º üá∑üá∫\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.word)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–æ –∏ –Ω–∞–∂–∞–ª /cancel
async def process_cancel(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
    await message.answer(
        text='–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤, '
             '–Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ ‚è≠"',
             reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.clear()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ
async def process_word_delete(message: Message, state: FSMContext):
    word_to_del = message.text
    result = del_word(session, message, word_to_del)    # –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã
    await state.clear()
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
    await message.answer(
        text=result,
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

async def process_word_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(word=message.text)
    await message.answer(
        text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º üá¨üáß',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.tr)

async def process_tr_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(tr=message.text)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.var_1)

async def process_var_1_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(var_1=message.text)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.var_2)

async def process_var_2_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(var_2=message.text)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.var_3)

async def process_var_3_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
    await state.update_data(var_3=message.text)
    added_word = await state.get_data()
    add_word(session, message, added_word)  # –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ –±–∞–∑—É
    await state.clear()
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ! –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. '
        '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤, '
        '–Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ ‚è≠"',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ñ–∏–ª—å—Ç—Ä—ã
async def other_messages(message: Message):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–ù–∞—á–∞—Ç—å'))
    await message.answer(
        '–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n'
        '–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    