from random import shuffle, choice
from configparser import ConfigParser

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ContentType
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import F


# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
config = ConfigParser()
config.read('config.ini')
BOT_TOKEN = config['TGBot']['token']

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

words = [
    {'word': '–û–Ω–∞', 'tr': 'She', 'var_1': 'We', 'var_2': 'Her', 'var_3': 'He'},
    {'word': '–°—Ç–æ–ª', 'tr': 'Table', 'var_1': 'Chair', 'var_2': 'Stool', 'var_3': 'Boat'},
    {'word': '–Æ–±–∫–∞', 'tr': 'Skirt', 'var_1': 'Dress', 'var_2': 'Wear', 'var_3': 'Coat'},
    {'word': '–ó–æ–Ω—Ç', 'tr': 'Umbrella', 'var_1': 'Raincoat', 'var_2': 'Jacket', 'var_3': 'Sword'},
    {'word': '–ö—É–∫–ª–∞', 'tr': 'Doll', 'var_1': 'Toy', 'var_2': 'Barbie', 'var_3': 'Thing'},
    {'word': '–¢–≤–æ—Ä–æ–≥', 'tr': 'Cottage cheese', 'var_1': 'Cheese', 'var_2': 'Sour cream', 'var_3': 'Milk'},
    {'word': '–•—É—Ä–º–∞', 'tr': 'Persimmon', 'var_1': 'Eggplant', 'var_2': 'Orange', 'var_3': 'Pineapple'},
    {'word': '–ü–æ–º–∞–¥–∞', 'tr': 'Lipctick', 'var_1': 'Lipgloss', 'var_2': 'Pencil', 'var_3': 'Stick'},
    {'word': '–ó–º–µ—è', 'tr': 'Snake', 'var_1': 'Python', 'var_2': 'Boa', 'var_3': 'Anaconda'}
]
users = {'user_id': {'words': [], 'current_word': 'word_id'}}

def keyboard_builder(var_buttons: list):
    builder = ReplyKeyboardBuilder()
    shuffle(var_buttons)
    main_buttons = ['–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô', '–î–∞–ª—å—à–µ ‚è≠']
    for button in var_buttons:
        builder.add(KeyboardButton(text=button))
    for button in main_buttons:
        builder.add(KeyboardButton(text=button))
    builder.adjust(2, 2, 2, 1)
    return builder

def main_buttons():
    main_buttons = ['–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô', '–î–∞–ª—å—à–µ ‚è≠']
    builder = ReplyKeyboardBuilder()
    for button in main_buttons:
        builder.add(KeyboardButton(text=button))
    builder.adjust(2, 1)
    return builder

class AddWordForm(StatesGroup):
    word = State()
    tr = State()
    var_1 = State()
    var_2 = State()
    var_3 = State()

class CheckTranslate(StatesGroup):
    tr_word = State()
    var = State()

class WordToDelete(StatesGroup):
    word_to_del = State()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    if message.from_user.id not in users:
        users[message.from_user.id] = {'words': words.copy()}
    button_1 = KeyboardButton(text='–ù–∞—á–∞—Ç—å')
    button_2 = KeyboardButton(text='/help')
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
    '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. ' 
    '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.',
    reply_markup=keyboard
)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
# @dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–ù–∞—á–∞—Ç—å'))

    await message.answer(
        '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, '
        '–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n'
        '- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n'
        '- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n'
        '–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞—á–∞—Ç—å"
# @dp.message(F.text.lower().in_(['–Ω–∞—á–∞—Ç—å', '–¥–∞–ª—å—à–µ ‚è≠']))
async def process_start_words(message: Message, state: FSMContext):
    word = choice(users[message.from_user.id]['words'])
    # users[message.from_user.id]['current_word'] = word
    await state.set_state(CheckTranslate.tr_word)
    await state.update_data(tr_word=word)
    var_buttons = [
        word['tr'], word['var_1'], word['var_2'], word['var_3']
    ]
    builder = keyboard_builder(var_buttons)
    await state.set_state(CheckTranslate.var)
    await message.answer(
        f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n"{word["word"]}"',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )


# @dp.message(StateFilter(CheckTranslate.var))
async def process_check_translate(message: Message, state: FSMContext):
    # word = users[message.from_user.id]['current_word']
    await state.update_data(var=message.text)
    data = await state.get_data()
    word = data.get('tr_word')
    print(word)
    if message.text.lower() == word['tr'].lower():
        builder = main_buttons()
        answer = ['–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ!', '–¢–æ—á–Ω–æ!', '–û—Ç–ª–∏—á–Ω–æ!', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!']
        await state.clear()
        await message.answer(
            f'{choice(answer)} –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?', 
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        var_buttons = [
        word['tr'], word['var_1'], word['var_2'], word['var_3']
    ]
        builder = keyboard_builder(var_buttons)
        answer = ['–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ']
        await state.set_state(CheckTranslate.var)
        await message.answer(
            f'{choice(answer)}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n'
            f'–°–ª–æ–≤–æ "{word["word"]}"',
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )

# @dp.message(F.text.lower().in_(['—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô', '—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ']))
async def delete_word(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º üá∑üá∫ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å '
        '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(WordToDelete.word_to_del)


# @dp.message(F.text.lower().in_(['–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ']))
async def process_word_fillform(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º üá∑üá∫\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.word)

# @dp.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
    await message.answer(
        text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞\n'
             '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤, '
             '–Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ ‚è≠"',
             reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()

async def process_word_delete(message: Message, state: FSMContext):
    word_to_del = message.text
    try:
        for w in users[message.from_user.id]['words']:
            if word_to_del.lower() == w['word'].lower():
                users[message.from_user.id]['words'].remove(w)
        await state.clear()
        builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
        await message.answer(
            text='–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚ùå –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?',
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
    except:
        await state.clear()
        builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
        await message.answer(
            text='–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n'
            '–ù–∞–∂–º–∏—Ç–µ –¥–∞–ª—å—à–µ ‚è≠, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏–Ω–≥',
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )

# @dp.message(StateFilter(AddWordForm.word))
async def process_word_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(word=message.text)
    await message.answer(
        text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º üá¨üáß',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.tr)

# @dp.message(StateFilter(AddWordForm.tr))
async def process_tr_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(tr=message.text)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.var_1)

# @dp.message(StateFilter(AddWordForm.var_1))
async def process_var_1_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(var_1=message.text)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.var_2)

# @dp.message(StateFilter(AddWordForm.var_2))
async def process_var_2_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='/cancel'))
    await state.update_data(var_2=message.text)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(AddWordForm.var_3)

# @dp.message(StateFilter(AddWordForm.var_3))
async def process_var_3_sent(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–î–∞–ª—å—à–µ ‚è≠'))
    await state.update_data(var_3=message.text)
    users[message.from_user.id]['words'].extend(await state.get_data())
    await state.clear()
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ! –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. '
        '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤, '
        '–Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ ‚è≠"',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

# @dp.message()
async def other_messages(message: Message):
    builder = ReplyKeyboardBuilder().add(KeyboardButton(text='–ù–∞—á–∞—Ç—å'))
    await message.answer(
        '–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n'
        '–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä',
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )

dp.message.register(process_start_command, CommandStart())
dp.message.register(process_help_command, Command(commands='help'))
dp.message.register(process_start_words, F.text.lower().in_(['–Ω–∞—á–∞—Ç—å', '–¥–∞–ª—å—à–µ ‚è≠']))
dp.message.register(delete_word, F.text.lower().in_(['—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô', '—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ']))
dp.message.register(process_word_fillform, F.text.lower().in_(['–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ']))
dp.message.register(process_check_translate, StateFilter(CheckTranslate.var))
dp.message.register(process_cancel, Command(commands='cancel'), ~StateFilter(default_state))
dp.message.register(process_word_delete, StateFilter(WordToDelete.word_to_del))
dp.message.register(process_word_sent, StateFilter(AddWordForm.word))
dp.message.register(process_tr_sent, StateFilter(AddWordForm.tr))
dp.message.register(process_var_1_sent, StateFilter(AddWordForm.var_1))
dp.message.register(process_var_2_sent, StateFilter(AddWordForm.var_2))
dp.message.register(process_var_3_sent, StateFilter(AddWordForm.var_3))
dp.message.register(other_messages)


if __name__ == '__main__':
    dp.run_polling(bot)